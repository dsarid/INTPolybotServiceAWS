name: Polybot Microservice Deployment

on:
  push:
    paths:
      - 'polybot/**'
    branches:
      - main
env:
  REGION: "eu-central-1"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ec2_ips: ${{ steps.set_ip.outputs.ec2_ips }}
    steps:
      - name: Fetch EC2 Public IPs
        id: set_ip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          tag_key="App"
          tag_value="polybot"
          
          # AWS CLI command to describe instances with the specified tag
          instance_info=$(aws ec2 describe-instances --region "eu-central-1"\
            --query 'Reservations[*].Instances[*].{InstanceId:InstanceId}' \
            --filters "Name=tag:App,Values=polybot" \
            --output text)
          
          # Output the the tag:
          echo "the tag key is: $tag_key and the value is: $tag_value"
          
          echo "
            ----
          $instance_info
            ----
          "
          # Check if instance_info is not empty
          if [ -n "$instance_info" ]; then
            # Extract instance IDs from JSON
            instance_ids=$instance_info
          
            # Iterate through each instance ID
            for instance_id in $instance_ids; do
          
              # Check if instance is running
              state=$(aws ec2 describe-instances --region "eu-central-1" \
                --query 'Reservations[*].Instances[*].{State:State.Name}' \
                --filters "Name=instance-id,Values=$instance_id" \
                --output text)
      
              echo "Instance ID: $instance_id"
              echo "Current State: $state"
      
              if [ "$state" != "running" ]; then
                echo "Starting instance..."
                aws ec2 start-instances --region "eu-central-1" --instance-ids $instance_id
    
                # Wait until the instance is running
                aws ec2 wait instance-running --region "eu-central-1" --instance-ids $instance_id
    
                # Retrieve updated information after starting
              fi
      
            done
            public_ips=$(aws ec2 describe-instances --region "eu-central-1" \
              --query 'Reservations[*].Instances[*].{PublicIpAddress:PublicIpAddress}' \
              --filters "Name=tag:${tag_key},Values=${tag_value}" \
              --output text)
            
            public_ips=$(echo $public_ips | tr ' ' ',')
            echo "Public IPS: $public_ips"
          
            echo "ec2_ips=$public_ips" >> $GITHUB_OUTPUT
          else
            echo "No instances found with tag ${tag_key}=${tag_value}"
            echo $IPS
            exit 1
          fi

  Build:
    outputs:
      image_ver: ${{ steps.build.outputs.image_ver }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code

        uses: actions/checkout@v2

      - name: Build and push image
        id: build
        run: |
          cd polybot
          
          # TODO your implementation here....     
                    
          # Login to ECR 
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 019273956931.dkr.ecr.eu-central-1.amazonaws.com

          IMAGE_VER=prod-0.0.${{ github.run_number }}
          IMAGE_NAME=aws-project-polybot:$IMAGE_VER
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME 019273956931.dkr.ecr.eu-central-1.amazonaws.com/$IMAGE_NAME
          docker push 019273956931.dkr.ecr.eu-central-1.amazonaws.com/$IMAGE_NAME
          echo "image_ver=$IMAGE_VER" >> "$GITHUB_OUTPUT"

  Deploy:
    runs-on: ubuntu-latest
    needs:
      - Build
      - setup
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Deploy new version
        env:
          IPS: ${{ needs.setup.outputs.ec2_ips }}
          IMAGE_VER: ${{ needs.Build.outputs.image_ver }}
        uses: appleboy/ssh-action@master
        with:
          host: 52.59.240.124,3.120.231.238
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            IMAGEVER=$IMAGE_VER
            
            sudo -u ubuntu aws ecr get-login-password \
              --region ${{ env.REGION }} | sudo -u ubuntu docker login --username AWS \
              --password-stdin 019273956931.dkr.ecr.eu-central-1.amazonaws.com
            
            sudo -u ubuntu docker stop $(docker ps -q)
            sudo -u ubuntu docker container prune -f
            sudo -u ubuntu docker run --restart on-failure \
              --name poly -d -p 8443:8443 \
              "019273956931.dkr.ecr.eu-central-1.amazonaws.com/aws-project-polybot:$IMAGEVER"
