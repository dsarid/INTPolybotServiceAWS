name: Polybot Microservice Deployment

on:
  workflow_dispatch:
    inputs:
      ecr_name:
        required: true
        type: string
        description: ecr name
      ecr_url:
        required: true
        type: string
        description: ecr url
      region:
        required: true
        type: string
        description: region

env:
  REGION: ${{ github.event.inputs.region }}

jobs:

  Build:
    outputs:
      image_ver: ${{ steps.build.outputs.image_ver }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v4

      - name: Build and push image
        id: build
        run: |
          cd polybot
                    
          # Login to ECR 
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region "${REGION}" | docker login --username AWS --password-stdin "019273956931.dkr.ecr.${REGION}.amazonaws.com"

          IMAGE_VER=prod-1.0.${{ github.run_number }}
          IMAGE_NAME="${{ github.event.inputs.ecr_name }}:$IMAGE_VER"
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME 019273956931.dkr.ecr.${REGION}.amazonaws.com/$IMAGE_NAME
          docker push 019273956931.dkr.ecr.${REGION}.amazonaws.com/$IMAGE_NAME
          echo "image_ver=$IMAGE_VER" >> "$GITHUB_OUTPUT"

  Deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      REGION: ${{ github.event.inputs.region }}
      IMAGE_VER: ${{ needs.Build.outputs.image_ver }}
    needs:
      - Build
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v4

      - name: Deploy new version
        id: set_ip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          IMAGE_VER: ${{ needs.Build.outputs.image_ver }}
        run: |
          tag_key="App"
          tag_value="polybot-tf"
          desired_healthy_instances='2'

          # AWS CLI command to describe instances with the specified tag
          instance_info=$(aws ec2 describe-instances --region "${REGION}"\
            --query 'Reservations[*].Instances[*].{InstanceId:InstanceId}' \
            --filters "Name=tag:App,Values=polybot-tf" \
            --output text)

          # Output the the tag:
          echo "the tag key is: $tag_key and the value is: $tag_value"

          echo "
            ----
          $instance_info
            ----
          "
          # echo "instance_info=\"${instance_info}\"" >> "$GITHUB_ENV"
          echo "this is line is 80"

          # Check if instance_info is not empty
          if [ -n "$instance_info" ]; then
            # Extract instance IDs from JSON
            instance_ids=$instance_info
            echo "this is line is 81"

          else
            echo "No instances found with tag ${tag_key}=${tag_value}"
            echo $IPS
            exit 1
          fi
          # Iterate through each instance ID
          # instance_ids=${{ steps.validate_inst.outputs.instance_ids }}
          echo "this is line is 82"
          for instance_id in $instance_ids; do
            echo "this is line is 83"
            aws ec2 stop-instances --region "${REGION}" --instance-ids $instance_id

            # Wait until the instance is running
            aws ec2 wait instance-stopped --region "${REGION}" --instance-ids $instance_id

            aws ec2 start-instances --region "${REGION}" --instance-ids $instance_id
            aws ec2 wait instance-running --region "${REGION}" --instance-ids $instance_id
            echo "this is line is 84"
            # Retrieve updated information after starting
          done

