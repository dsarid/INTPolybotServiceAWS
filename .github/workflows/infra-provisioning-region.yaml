name: Polybot Infrastructure Terraform Specific Region

on:
  workflow_call:
    inputs:
      region-code:
        required: true
        type: string
    secrets:
      TELEGRAM_TOKEN:
        required: true
      ACCESS_KEY_ID:
        required: true
      SECRET_ACCESS_KEY:
        required: true
      SSH_PUBLIC_KEY:
        required: true


jobs:
  init_ecr:
    runs-on: ubuntu-latest
    outputs:
      ecr_name: ${{ steps.set-vars.outputs.ecr_name }}
      ecr_url: ${{ steps.set-vars.outputs.ecr_url }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./tf  # The directory containing your Terraform configuration files
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.0

      - name: Terraform init
        run: terraform init

      - name: Terraform workspace select
        run: terraform workspace select ${{ inputs.region-code }}.prod || terraform workspace new ${{ inputs.region-code }}.prod

      - name: Terraform validate
        run: terraform validate

      - name: Terraform-apply
        id: set-vars
        run: |
          export TF_VAR_sshPubKey="${{ secrets.SSH_PUBLIC_KEY }}"
          export TF_VAR_botToken=${{ secrets.TELEGRAM_TOKEN }}
          terraform apply -target module.poly_ecr -target module.yolo_ecr -auto-approve -var-file=region.${{ inputs.region-code }}.prod.tfvars
          $(terraform output -json | \
          jq -r '@sh "export EXAMPLE1=\(.poly_ecr_name.value)\nexport EXAMPLE2=\(.poly_ecr_url.value)\nexport EXAMPLE3=\(.yolo_ecr_name.value)\nexport EXAMPLE4=\(.yolo_ecr_url.value)"')
          echo "${EXAMPLE1}"
          echo "${EXAMPLE2}"
          echo "${EXAMPLE3}"
          echo "${EXAMPLE4}"
          echo "ecr_name=${example1:1:-1}" >> "$GITHUB_OUTPUT"
          echo "ecr_url=${example2:1:-1}" >> "$GITHUB_OUTPUT"


          cd ../polybot
                    
          # Login to ECR 
          export AWS_ACCESS_KEY_ID=${{ secrets.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ${{ inputs.region-code }} | docker login --username AWS --password-stdin 019273956931.dkr.ecr.${{ inputs.region-code }}.amazonaws.com

          IMAGE_VER=prod-0.0.${{ github.run_number }}
          IMAGE_NAME="${EXAMPLE1:1:-1}:$IMAGE_VER"
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME 019273956931.dkr.ecr.${{ inputs.region-code }}.amazonaws.com/$IMAGE_NAME
          docker push 019273956931.dkr.ecr.${{ inputs.region-code }}.amazonaws.com/$IMAGE_NAME
          echo "image_ver=$IMAGE_VER" >> "$GITHUB_OUTPUT"


          cd ../yolo5
                    
          # Login to ECR 
          export AWS_ACCESS_KEY_ID=${{ secrets.ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ${{ inputs.region-code }} | docker login --username AWS --password-stdin 019273956931.dkr.ecr.${{ inputs.region-code }}.amazonaws.com

          IMAGE_VER=prod-0.0.${{ github.run_number }}
          IMAGE_NAME="${EXAMPLE3:1:-1}:$IMAGE_VER"
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME 019273956931.dkr.ecr.${{ inputs.region-code }}.amazonaws.com/$IMAGE_NAME
          docker push 019273956931.dkr.ecr.${{ inputs.region-code }}.amazonaws.com/$IMAGE_NAME
          echo "image_ver=$IMAGE_VER" >> "$GITHUB_OUTPUT"


#  first_build:
#    needs:
#      - init_ecr
#    uses: ./.github/workflows/polybot-first-deployment.yaml
#    with:
#      ecr_name: ${{ needs.init_ecr.outputs.ecr_name }}
#      ecr_url: ${{ needs.init_ecr.outputs.ecr_url }}
#      region: ${{ inputs.region-code }}
#    secrets:
#      ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
#      SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}


  Terraform:
    needs:
      - init_ecr
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./tf  # The directory containing your Terraform configuration files
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.0

      - name: Terraform init
        run: terraform init

      - name: Terraform workspace select
        run: terraform workspace select ${{ inputs.region-code }}.prod || terraform workspace new ${{ inputs.region-code }}.prod

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: | 
          export TF_VAR_sshPubKey="${{ secrets.SSH_PUBLIC_KEY }}"
          export TF_VAR_botToken=${{ secrets.TELEGRAM_TOKEN }}
          terraform plan -var-file=region.${{ inputs.region-code }}.prod.tfvars

      - name: Terraform apply
        run: |
          export TF_VAR_sshPubKey="${{ secrets.SSH_PUBLIC_KEY }}"
          export TF_VAR_botToken=${{ secrets.TELEGRAM_TOKEN }}
          terraform apply -auto-approve -var-file=region.${{ inputs.region-code }}.prod.tfvars
